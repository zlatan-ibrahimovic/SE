/* The following code was generated by JFlex 1.4.2 on 30/11/14 22:32 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 30/11/14 22:32 from the specification file
 * <tt>C:/Users/HP/Desktop/Compilation/Compil/lexer/lexer.jflex</tt>
 */
class CompilerLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_LITERAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\7\1\0\1\0\1\6\22\0\1\63\1\42\1\65"+
    "\2\0\1\45\1\36\1\15\1\26\1\27\1\17\1\14\1\47\1\30"+
    "\1\12\1\16\1\10\11\11\1\44\1\46\1\41\1\43\1\31\2\0"+
    "\4\4\1\13\25\4\1\32\1\66\1\33\1\62\1\5\1\0\1\24"+
    "\1\61\1\51\1\54\1\22\1\23\1\60\1\56\1\50\2\4\1\3"+
    "\1\55\1\1\1\53\1\52\1\4\1\21\1\25\1\20\1\2\1\4"+
    "\1\57\1\4\1\64\1\4\1\34\1\37\1\35\1\40\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\1\1\2\3\1\4\1\5\1\6"+
    "\1\7\1\10\5\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\6\2\1\33\1\34"+
    "\1\35\1\36\1\37\2\2\1\40\1\41\1\42\3\0"+
    "\1\43\1\44\11\2\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\6\2\1\66\1\67\1\70"+
    "\1\71\2\2\1\0\1\72\2\0\23\2\1\73\1\2"+
    "\2\40\2\0\1\74\1\75\3\2\1\76\13\2\1\77"+
    "\2\2\1\0\4\2\1\100\1\101\5\2\1\102\2\2"+
    "\1\103\1\2\1\0\1\104\1\105\1\106\3\2\1\107"+
    "\1\110\4\2\1\111\1\2\1\112\1\2\1\113\2\2"+
    "\1\114\1\115\3\2\1\116\1\117\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\156\0\u044c\0\u0483\0\u04ba"+
    "\0\156\0\156\0\156\0\u04f1\0\u0528\0\156\0\u055f\0\u0596"+
    "\0\u05cd\0\u0604\0\u063b\0\156\0\156\0\u0672\0\u06a9\0\u06e0"+
    "\0\u0717\0\u074e\0\u0785\0\156\0\156\0\u07bc\0\156\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\156\0\156\0\u08cf\0\u0906\0\u093d"+
    "\0\156\0\156\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\u0b63\0\334\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\156\0\156\0\156\0\156\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\156\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c"+
    "\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054"+
    "\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\334"+
    "\0\u120c\0\156\0\u1243\0\u127a\0\u12b1\0\334\0\334\0\u12e8"+
    "\0\u131f\0\u1356\0\334\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469"+
    "\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\334\0\u15ea"+
    "\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\334\0\334"+
    "\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\334\0\u187e\0\u18b5"+
    "\0\334\0\u18ec\0\u1923\0\334\0\334\0\334\0\u195a\0\u1991"+
    "\0\u19c8\0\334\0\334\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\156"+
    "\0\u1adb\0\334\0\u1b12\0\334\0\u1b49\0\u1b80\0\334\0\334"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\334\0\334\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\5\1\3\1\7\1\3"+
    "\1\10\1\11\1\12\1\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\5\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\2\5\1\51\1\5\1\52\1\5"+
    "\1\53\1\54\1\3\1\5\1\55\1\3\6\56\2\0"+
    "\55\56\1\57\1\60\70\0\1\5\1\61\3\5\2\0"+
    "\2\5\1\0\1\5\4\0\6\5\22\0\12\5\2\0"+
    "\1\5\3\0\5\5\2\0\2\5\1\0\1\5\4\0"+
    "\6\5\22\0\12\5\2\0\1\5\3\0\5\5\2\0"+
    "\2\5\1\0\1\5\4\0\6\5\22\0\1\62\11\5"+
    "\2\0\1\5\11\0\1\3\71\0\1\63\64\0\2\11"+
    "\1\63\64\0\2\63\71\0\1\64\26\0\1\65\23\0"+
    "\6\66\2\0\57\66\16\0\1\67\1\70\23\0\1\71"+
    "\66\0\1\72\24\0\5\5\2\0\2\5\1\0\1\5"+
    "\4\0\1\5\1\73\4\5\22\0\12\5\2\0\1\74"+
    "\3\0\5\5\2\0\2\5\1\0\1\5\4\0\2\5"+
    "\1\75\3\5\22\0\12\5\2\0\1\5\3\0\2\5"+
    "\1\76\2\5\2\0\2\5\1\0\1\5\4\0\6\5"+
    "\22\0\12\5\2\0\1\5\3\0\1\5\1\77\1\100"+
    "\2\5\2\0\2\5\1\0\1\5\4\0\4\5\1\101"+
    "\1\5\22\0\3\5\1\102\6\5\2\0\1\5\3\0"+
    "\5\5\2\0\2\5\1\0\1\5\4\0\1\103\5\5"+
    "\22\0\12\5\2\0\1\5\31\0\1\104\67\0\1\105"+
    "\1\106\11\0\1\107\54\0\1\110\11\0\1\111\56\0"+
    "\1\112\71\0\1\113\67\0\1\114\70\0\1\115\1\0"+
    "\1\116\66\0\1\117\66\0\1\120\66\0\1\121\66\0"+
    "\1\122\24\0\1\123\4\5\2\0\2\5\1\0\1\5"+
    "\4\0\3\5\1\124\2\5\22\0\12\5\2\0\1\5"+
    "\3\0\2\5\1\125\2\5\2\0\2\5\1\0\1\5"+
    "\4\0\6\5\22\0\6\5\1\126\3\5\2\0\1\5"+
    "\3\0\5\5\2\0\2\5\1\0\1\5\4\0\1\5"+
    "\1\127\4\5\22\0\12\5\2\0\1\5\3\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\4\5\1\130\1\5"+
    "\22\0\12\5\2\0\1\5\3\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\6\5\22\0\6\5\1\131\3\5"+
    "\2\0\1\5\3\0\5\5\2\0\2\5\1\0\1\5"+
    "\4\0\6\5\22\0\3\5\1\132\6\5\2\0\1\5"+
    "\2\0\6\56\2\0\55\56\3\0\1\133\16\0\1\134"+
    "\1\135\43\0\1\136\2\0\2\5\1\137\2\5\2\0"+
    "\2\5\1\0\1\5\4\0\6\5\22\0\12\5\2\0"+
    "\1\5\3\0\5\5\2\0\2\5\1\0\1\5\4\0"+
    "\5\5\1\140\22\0\12\5\2\0\1\5\12\0\2\63"+
    "\1\0\1\141\6\0\1\141\61\0\1\142\51\0\6\67"+
    "\1\7\1\3\57\67\17\143\1\144\47\143\1\0\1\5"+
    "\1\145\3\5\2\0\2\5\1\0\1\5\4\0\6\5"+
    "\22\0\12\5\2\0\1\5\3\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\6\5\22\0\2\5\1\146\7\5"+
    "\2\0\1\5\3\0\5\5\2\0\2\5\1\0\1\5"+
    "\4\0\1\147\5\5\22\0\1\5\1\150\1\151\7\5"+
    "\2\0\1\5\3\0\5\5\2\0\2\5\1\0\1\5"+
    "\4\0\5\5\1\152\22\0\12\5\2\0\1\5\3\0"+
    "\1\153\4\5\2\0\2\5\1\0\1\5\4\0\6\5"+
    "\22\0\12\5\2\0\1\5\3\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\6\5\22\0\3\5\1\154\6\5"+
    "\2\0\1\5\3\0\2\5\1\155\2\5\2\0\2\5"+
    "\1\0\1\5\4\0\6\5\22\0\12\5\2\0\1\5"+
    "\3\0\5\5\2\0\2\5\1\0\1\5\4\0\1\5"+
    "\1\156\4\5\22\0\12\5\2\0\1\5\3\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\1\5\1\157\2\5"+
    "\1\160\1\5\22\0\12\5\2\0\1\5\3\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\1\161\5\5\22\0"+
    "\12\5\2\0\1\5\3\0\5\5\2\0\2\5\1\0"+
    "\1\5\4\0\4\5\1\162\1\5\22\0\12\5\2\0"+
    "\1\5\3\0\5\5\2\0\2\5\1\0\1\5\4\0"+
    "\4\5\1\163\1\5\22\0\12\5\2\0\1\5\3\0"+
    "\5\5\2\0\2\5\1\0\1\5\4\0\6\5\22\0"+
    "\3\5\1\164\6\5\2\0\1\5\3\0\5\5\2\0"+
    "\2\5\1\0\1\5\4\0\6\5\22\0\1\165\11\5"+
    "\2\0\1\5\3\0\5\5\2\0\2\5\1\0\1\5"+
    "\4\0\6\5\22\0\1\166\11\5\2\0\1\5\3\0"+
    "\5\5\2\0\2\5\1\0\1\5\4\0\6\5\22\0"+
    "\3\5\1\167\6\5\2\0\1\5\3\0\2\5\1\170"+
    "\2\5\2\0\2\5\1\0\1\5\4\0\6\5\22\0"+
    "\12\5\2\0\1\5\3\0\5\5\2\0\2\5\1\0"+
    "\1\5\4\0\1\171\5\5\22\0\12\5\2\0\1\5"+
    "\12\0\1\172\1\173\2\0\1\174\13\0\1\174\36\0"+
    "\17\143\1\175\47\143\16\0\1\3\1\144\50\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\2\5\1\176\3\5"+
    "\22\0\12\5\2\0\1\5\3\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\2\5\1\177\3\5\22\0\12\5"+
    "\2\0\1\5\3\0\1\5\1\200\3\5\2\0\2\5"+
    "\1\0\1\5\4\0\6\5\22\0\12\5\2\0\1\5"+
    "\3\0\5\5\2\0\2\5\1\0\1\5\4\0\6\5"+
    "\22\0\3\5\1\201\6\5\2\0\1\5\3\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\2\5\1\202\3\5"+
    "\22\0\12\5\2\0\1\5\3\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\2\5\1\203\3\5\22\0\12\5"+
    "\2\0\1\5\3\0\5\5\2\0\2\5\1\0\1\5"+
    "\4\0\6\5\22\0\1\5\1\204\10\5\2\0\1\5"+
    "\3\0\5\5\2\0\2\5\1\0\1\5\4\0\4\5"+
    "\1\205\1\5\22\0\12\5\2\0\1\5\3\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\5\5\1\206\22\0"+
    "\12\5\2\0\1\5\3\0\5\5\2\0\2\5\1\0"+
    "\1\5\4\0\2\5\1\207\3\5\22\0\12\5\2\0"+
    "\1\5\3\0\1\5\1\210\3\5\2\0\2\5\1\0"+
    "\1\5\4\0\6\5\22\0\1\211\11\5\2\0\1\5"+
    "\3\0\5\5\2\0\2\5\1\0\1\5\4\0\1\212"+
    "\5\5\22\0\12\5\2\0\1\5\3\0\5\5\2\0"+
    "\2\5\1\0\1\5\4\0\2\5\1\213\3\5\22\0"+
    "\12\5\2\0\1\5\3\0\5\5\2\0\2\5\1\0"+
    "\1\5\4\0\5\5\1\214\22\0\12\5\2\0\1\5"+
    "\3\0\5\5\2\0\2\5\1\0\1\5\4\0\1\5"+
    "\1\215\4\5\22\0\12\5\2\0\1\5\3\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\6\5\22\0\1\5"+
    "\1\216\10\5\2\0\1\5\3\0\1\217\4\5\2\0"+
    "\2\5\1\0\1\5\4\0\6\5\22\0\12\5\2\0"+
    "\1\5\3\0\2\5\1\220\2\5\2\0\2\5\1\0"+
    "\1\5\4\0\6\5\22\0\12\5\2\0\1\5\3\0"+
    "\2\5\1\221\2\5\2\0\2\5\1\0\1\5\4\0"+
    "\6\5\22\0\12\5\2\0\1\5\3\0\5\5\2\0"+
    "\2\5\1\0\1\5\4\0\6\5\22\0\12\5\1\0"+
    "\1\222\1\5\12\0\2\173\65\0\1\172\1\173\55\0"+
    "\16\143\1\3\1\175\47\143\1\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\1\5\1\223\4\5\22\0\12\5"+
    "\2\0\1\5\3\0\5\5\2\0\2\5\1\0\1\5"+
    "\4\0\1\5\1\224\4\5\22\0\12\5\2\0\1\5"+
    "\3\0\5\5\2\0\2\5\1\0\1\5\4\0\4\5"+
    "\1\225\1\5\22\0\12\5\2\0\1\5\3\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\1\226\5\5\22\0"+
    "\12\5\2\0\1\5\3\0\5\5\2\0\2\5\1\0"+
    "\1\5\4\0\1\227\5\5\22\0\12\5\2\0\1\5"+
    "\3\0\5\5\2\0\2\5\1\0\1\5\4\0\2\5"+
    "\1\230\3\5\22\0\12\5\2\0\1\5\3\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\4\5\1\231\1\5"+
    "\22\0\12\5\2\0\1\5\3\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\6\5\22\0\1\5\1\232\10\5"+
    "\2\0\1\5\3\0\1\233\4\5\2\0\2\5\1\0"+
    "\1\5\4\0\6\5\22\0\12\5\2\0\1\5\3\0"+
    "\5\5\2\0\2\5\1\0\1\5\4\0\6\5\22\0"+
    "\1\234\11\5\2\0\1\5\3\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\6\5\22\0\10\5\1\235\1\5"+
    "\2\0\1\5\3\0\5\5\2\0\2\5\1\0\1\5"+
    "\4\0\5\5\1\236\22\0\12\5\2\0\1\5\3\0"+
    "\5\5\2\0\2\5\1\0\1\5\4\0\4\5\1\237"+
    "\1\5\22\0\12\5\2\0\1\5\3\0\5\5\2\0"+
    "\2\5\1\0\1\5\4\0\2\5\1\240\3\5\22\0"+
    "\12\5\2\0\1\5\3\0\5\5\2\0\2\5\1\0"+
    "\1\5\4\0\2\5\1\241\3\5\22\0\12\5\2\0"+
    "\1\5\3\0\5\5\2\0\2\5\1\0\1\5\4\0"+
    "\2\5\1\242\3\5\22\0\12\5\2\0\1\5\55\0"+
    "\1\243\14\0\1\244\4\5\2\0\2\5\1\0\1\5"+
    "\4\0\6\5\22\0\12\5\2\0\1\5\3\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\6\5\22\0\4\5"+
    "\1\245\5\5\2\0\1\5\3\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\1\246\5\5\22\0\12\5\2\0"+
    "\1\5\3\0\5\5\2\0\2\5\1\0\1\5\4\0"+
    "\6\5\22\0\1\247\11\5\2\0\1\5\3\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\6\5\22\0\1\5"+
    "\1\250\10\5\2\0\1\5\3\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\1\251\5\5\22\0\12\5\2\0"+
    "\1\5\3\0\5\5\2\0\2\5\1\0\1\5\4\0"+
    "\6\5\22\0\10\5\1\252\1\5\2\0\1\5\3\0"+
    "\5\5\2\0\2\5\1\0\1\5\4\0\6\5\22\0"+
    "\1\5\1\253\10\5\2\0\1\5\3\0\5\5\2\0"+
    "\2\5\1\0\1\5\4\0\2\5\1\254\3\5\22\0"+
    "\12\5\2\0\1\5\3\0\5\5\2\0\2\5\1\0"+
    "\1\5\4\0\6\5\22\0\1\5\1\255\10\5\2\0"+
    "\1\5\3\0\5\5\2\0\2\5\1\0\1\5\4\0"+
    "\6\5\22\0\4\5\1\256\5\5\2\0\1\5\3\0"+
    "\5\5\2\0\2\5\1\0\1\5\4\0\4\5\1\257"+
    "\1\5\22\0\12\5\2\0\1\5\25\0\1\260\44\0"+
    "\5\5\2\0\2\5\1\0\1\5\4\0\6\5\22\0"+
    "\3\5\1\261\6\5\2\0\1\5\3\0\5\5\2\0"+
    "\2\5\1\0\1\5\4\0\6\5\22\0\6\5\1\262"+
    "\3\5\2\0\1\5\3\0\1\5\1\263\3\5\2\0"+
    "\2\5\1\0\1\5\4\0\6\5\22\0\12\5\2\0"+
    "\1\5\3\0\5\5\2\0\2\5\1\0\1\5\4\0"+
    "\1\5\1\264\4\5\22\0\12\5\2\0\1\5\3\0"+
    "\5\5\2\0\2\5\1\0\1\5\4\0\1\265\5\5"+
    "\22\0\12\5\2\0\1\5\3\0\1\5\1\266\3\5"+
    "\2\0\2\5\1\0\1\5\4\0\6\5\22\0\12\5"+
    "\2\0\1\5\3\0\1\267\4\5\2\0\2\5\1\0"+
    "\1\5\4\0\6\5\22\0\12\5\2\0\1\5\3\0"+
    "\1\270\4\5\2\0\2\5\1\0\1\5\4\0\6\5"+
    "\22\0\12\5\2\0\1\5\3\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\1\5\1\271\4\5\22\0\12\5"+
    "\2\0\1\5\3\0\5\5\2\0\2\5\1\0\1\5"+
    "\4\0\2\5\1\272\3\5\22\0\12\5\2\0\1\5"+
    "\3\0\5\5\2\0\2\5\1\0\1\5\4\0\1\5"+
    "\1\273\4\5\22\0\12\5\2\0\1\5\3\0\5\5"+
    "\2\0\2\5\1\0\1\5\4\0\2\5\1\274\3\5"+
    "\22\0\12\5\2\0\1\5\3\0\5\5\2\0\2\5"+
    "\1\0\1\5\4\0\1\5\1\275\4\5\22\0\12\5"+
    "\2\0\1\5\3\0\5\5\2\0\2\5\1\0\1\5"+
    "\4\0\2\5\1\276\3\5\22\0\12\5\2\0\1\5"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\21\1\1\11\3\1\3\11\2\1\1\11"+
    "\5\1\2\11\6\1\2\11\1\1\1\11\4\1\2\11"+
    "\3\0\2\11\11\1\17\11\10\1\4\11\2\1\1\0"+
    "\1\11\2\0\25\1\1\11\1\1\2\0\24\1\1\0"+
    "\20\1\1\0\14\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private Symbol symbol (int type) {
    return new Symbol (type, yyline, yycolumn);
}

private Symbol symbol (int type, Object value) {
    return new Symbol (type, yyline, yycolumn, value);
}

static protected void trace(String str){
    System.err.println("*** "+str);   
}

private StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CompilerLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CompilerLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return symbol(CompilerSymbol.IDENTIFIER, yytext());
          }
        case 81: break;
        case 46: 
          { return symbol(CompilerSymbol.LSHIFT);
          }
        case 82: break;
        case 32: 
          { return symbol(CompilerSymbol.FLOAT_LITERAL, new Float(yytext()));
          }
        case 83: break;
        case 62: 
          { return symbol(CompilerSymbol.ELSE);
          }
        case 84: break;
        case 60: 
          { System.out.println("BooleanLiteral");  return symbol(CompilerSymbol.BOOLEAN_LITERAL, true);
          }
        case 85: break;
        case 7: 
          { return symbol(CompilerSymbol.DIV);
          }
        case 86: break;
        case 48: 
          { return symbol(CompilerSymbol.DIFF);
          }
        case 87: break;
        case 11: 
          { return symbol(CompilerSymbol.MINUS);
          }
        case 88: break;
        case 24: 
          { return symbol(CompilerSymbol.MOD);
          }
        case 89: break;
        case 42: 
          { return symbol(CompilerSymbol.GE);
          }
        case 90: break;
        case 35: 
          { return symbol(CompilerSymbol.DIV_EQ);
          }
        case 91: break;
        case 53: 
          { return symbol(CompilerSymbol.IF);
          }
        case 92: break;
        case 23: 
          { return symbol(CompilerSymbol.DOUBLE_POINTS);
          }
        case 93: break;
        case 54: 
          { string.append('\n');
          }
        case 94: break;
        case 57: 
          { string.append('\"');
          }
        case 95: break;
        case 65: 
          { System.out.println("BooleanLiteral");  return symbol(CompilerSymbol.BOOLEAN_LITERAL, false);
          }
        case 96: break;
        case 70: 
          { return symbol(CompilerSymbol.REPEAT);
          }
        case 97: break;
        case 47: 
          { return symbol(CompilerSymbol.LE);
          }
        case 98: break;
        case 69: 
          { return symbol(CompilerSymbol.RECORD);
          }
        case 99: break;
        case 73: 
          { return symbol(CompilerSymbol.LIST);
          }
        case 100: break;
        case 56: 
          { string.append('\r');
          }
        case 101: break;
        case 58: 
          { return symbol(CompilerSymbol.CHARACTER_LITERAL, yytext());
          }
        case 102: break;
        case 19: 
          { return symbol(CompilerSymbol.NOT_UNARY);
          }
        case 103: break;
        case 55: 
          { string.append('\t');
          }
        case 104: break;
        case 67: 
          { return symbol(CompilerSymbol.WHILE);
          }
        case 105: break;
        case 36: 
          { return symbol(CompilerSymbol.MULT_EQ);
          }
        case 106: break;
        case 44: 
          { return symbol(CompilerSymbol.AND);
          }
        case 107: break;
        case 26: 
          { return symbol(CompilerSymbol.COMMA);
          }
        case 108: break;
        case 15: 
          { return symbol(CompilerSymbol.LA);
          }
        case 109: break;
        case 43: 
          { return symbol(CompilerSymbol.DOUBLE_BRACKET);
          }
        case 110: break;
        case 49: 
          { return symbol(CompilerSymbol.EQEQ);
          }
        case 111: break;
        case 78: 
          { return symbol(CompilerSymbol.STRUCTURE);
          }
        case 112: break;
        case 38: 
          { return symbol(CompilerSymbol.DECR);
          }
        case 113: break;
        case 76: 
          { return symbol(CompilerSymbol.BOOLEAN_TYPE);
          }
        case 114: break;
        case 6: 
          { return symbol(CompilerSymbol.VARIABLE_TYPE);
          }
        case 115: break;
        case 5: 
          { return symbol(CompilerSymbol.PLUS);
          }
        case 116: break;
        case 80: 
          { return symbol(CompilerSymbol.PROCEDURE);
          }
        case 117: break;
        case 21: 
          { return symbol(CompilerSymbol.NOT);
          }
        case 118: break;
        case 10: 
          { return symbol(CompilerSymbol.RPAR);
          }
        case 119: break;
        case 29: 
          { string.append(yytext());
          }
        case 120: break;
        case 68: 
          { return symbol(CompilerSymbol.RETURN);
          }
        case 121: break;
        case 71: 
          { return symbol(CompilerSymbol.STRING_TYPE);
          }
        case 122: break;
        case 33: 
          { return symbol(CompilerSymbol.INCR);
          }
        case 123: break;
        case 59: 
          { return symbol(CompilerSymbol.CONSTANTS);
          }
        case 124: break;
        case 17: 
          { return symbol(CompilerSymbol.ANDBIT_OR_MEMORYACCESS);
          }
        case 125: break;
        case 16: 
          { return symbol(CompilerSymbol.RA);
          }
        case 126: break;
        case 9: 
          { return symbol(CompilerSymbol.LPAR);
          }
        case 127: break;
        case 51: 
          { return symbol(CompilerSymbol.MOD_EQ);
          }
        case 128: break;
        case 28: 
          { yybegin(STRING_LITERAL);string.delete(0, string.length());
          }
        case 129: break;
        case 50: 
          { return symbol(CompilerSymbol.AFFECT);
          }
        case 130: break;
        case 72: 
          { return symbol(CompilerSymbol.STATIC);
          }
        case 131: break;
        case 18: 
          { return symbol(CompilerSymbol.OR_BIT);
          }
        case 132: break;
        case 12: 
          { return symbol(CompilerSymbol.GT);
          }
        case 133: break;
        case 8: 
          { return symbol(CompilerSymbol.MULT_OR_MEMORYACCESS);
          }
        case 134: break;
        case 22: 
          { return symbol(CompilerSymbol.EQ);
          }
        case 135: break;
        case 31: 
          { string.append('\\');
          }
        case 136: break;
        case 79: 
          { return symbol(CompilerSymbol.CHARACTER_TYPE);
          }
        case 137: break;
        case 30: 
          { yybegin(YYINITIAL);return symbol(CompilerSymbol.STRING_LITERAL, string.toString());
          }
        case 138: break;
        case 64: 
          { return symbol(CompilerSymbol.FLOAT_TYPE);
          }
        case 139: break;
        case 77: 
          { return symbol(CompilerSymbol.FUNCTION);
          }
        case 140: break;
        case 66: 
          { return symbol(CompilerSymbol.CLASS);
          }
        case 141: break;
        case 74: 
          { return symbol(CompilerSymbol.FOREACH);
          }
        case 142: break;
        case 20: 
          { return symbol(CompilerSymbol.LT);
          }
        case 143: break;
        case 1: 
          { /* ignore */
          }
        case 144: break;
        case 41: 
          { return symbol(CompilerSymbol.RSHIFT);
          }
        case 145: break;
        case 4: 
          { return symbol(CompilerSymbol.POINT_MEMORYACCESS);
          }
        case 146: break;
        case 13: 
          { return symbol(CompilerSymbol.LBRACKET);
          }
        case 147: break;
        case 3: 
          { return symbol(CompilerSymbol.INTEGER_LITERAL, new Integer(yytext()));
          }
        case 148: break;
        case 25: 
          { return symbol(CompilerSymbol.SEMIC);
          }
        case 149: break;
        case 63: 
          { return symbol(CompilerSymbol.MAIN);
          }
        case 150: break;
        case 37: 
          { return symbol(CompilerSymbol.FUNCTION_CALL);
          }
        case 151: break;
        case 52: 
          { return symbol(CompilerSymbol.IN);
          }
        case 152: break;
        case 34: 
          { return symbol(CompilerSymbol.PLUS_EQ);
          }
        case 153: break;
        case 61: 
          { return symbol(CompilerSymbol.TYPE);
          }
        case 154: break;
        case 75: 
          { return symbol(CompilerSymbol.INTEGER_TYPE);
          }
        case 155: break;
        case 45: 
          { return symbol(CompilerSymbol.OR);
          }
        case 156: break;
        case 40: 
          { return symbol(CompilerSymbol.MINUS_EQ);
          }
        case 157: break;
        case 14: 
          { return symbol(CompilerSymbol.RBRACKET);
          }
        case 158: break;
        case 27: 
          { return symbol(CompilerSymbol.POINTER_OR_XOR);
          }
        case 159: break;
        case 39: 
          { return symbol(CompilerSymbol.ARROW_MEMORYACCESS);
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(CompilerSymbol.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
